'scopeName': 'source.fstar'

'name': 'F*'

'fileTypes': ['fst', 'fsti', 'fs7']

'editor':
  'commentStart' : '\\(\\*+'
  'commentEnd'   : '\\*+\\)'

'patterns': [
  {
      'include': '#comments'
  }
  { # private , let, rec, function names, and val
    'name'  : 'meta.function.fstar'
    'match' : '''(?x) # split regex over several lines
                (?:\\b) # start at word boundary

                (?: # qualifiers
                  (abstract|private|assume|irreducible|unfoldable|new|inline|noeq|\
                  unopteq|logic|reifiable|reflectable)
                \\s+)? # space

                (val|(?:let)(?:\\srec)?) # declarations
                (?:\\s+) # space

                (?: # match function names and operators
                  (?: # function names
                    (?:\\()?
                    ([a-z][a-zA-Z0-9\'_]*)
                  )
                  |
                  (?: # define operators
                    (?:\\()
                    ([^\\s\\(\\)]+?)
                    (?:\\))
                  )
                )
              '''
    'captures' :
      '1' :
        'name' : 'keyword.qualifier.fstar'
      '2' :
        'name' : 'keyword.function.fstar'
      '3' :
        'name' : 'entity.name.function.fstar'
      '4' :
        'name' : 'entity.name.function.fstar'

  }
  { # private, type and type names
    'name'  : 'meta.type.fstar'
    'match' : '''(?x)
                (?:\\b
                  (abstract|private|assume|irreducible|unfoldable|\
                  new|inline|noeq|unopteq|logic|reifiable|reflectable)\
                \\s+)?

                (?:\\b(type)\\s+)
                ([a-zA-Z\'](?:\\w|\\_|\')*)
              '''
    'captures' :
      '1' :
        'name' : 'keyword.qualifier.fstar'
      '2' :
        'name' : 'keyword.type.fstar'
      '3' :
        'name' : 'entity.name.type.fstar'
  }
  { # Keywords
    'name'  : 'keyword.control.fstar'
    'match' : '\\b(assert|in|if|then|else|fun|λ|try|function|match|with|and|do)\\b'
  }
  { # Module declarations
    'name'  : 'meta.module.binding.fstar'
    'match' : '\\b(module) ([[:upper:]][a-zA-Z0-9]*)'
    'captures' :
      '1' :
        'name' : 'keyword.module.fstar'
      '2' :
        'name' : 'entity.name.module.fstar'
  }
  { # Open statements
    # TODO : Let open
    'name' : 'meta.module.open.fstar'
    'match' : '\\b(open) ([[:upper:]][a-zA-Z0-9]*(?:.?[a-zA-Z0-9]*)*)'
    'captures' :
      '1' :
        'name' : 'keyword.open.fstar'
      '2' :
        'name' : 'support.name.module.fstar'
  }
  {
    'name'  : 'keyword.other.fstar'
    'match' : '''(?x)
                  \\b(requires|ensures|modifies|kind|effect|default|new_effect|
                  sub_effect|total|begin|end|decreases)\\b
              '''
  }
  {
    'name'  : 'comment.line.preprocessor.fstar'
    'match' : '\\b(#set-options)\\b'
  }
  {
    'name' : 'constant.language.string'
    'match': '".*?"'
  }
  {
    'name' : 'constant.language.char'
    'match': '\'.\''
  }
  {
    'name'  : 'constant.numeric.integer.fstar'
    'match' : '\\b(?:0x|0o|0b)?(?:[0-9]+(?:y|uy|s|us|l|ul|L|uL|UL)?)'
  }
  {
    'name'  : 'constant.language.boolean.fstar'
    'match' : '\\b(true|false)\\b'
  }
  {
    'name'  : 'constant.language.boolean-type.fstar'
    'match' : '(\\b(?:True|False)\\b)|(?:⊤|⊥)'
  }
  {
    'name'  : 'constant.language.empty-list.fstar'
    'match' : '\\[\\]'
  }
  {
    'name'  : 'constant.language.unit.fstar'
    'match' : '\\(\\)'
  }
  {
    'name'  : 'constant.language.type.fstar'
    'match' : '\\b(Type|int|ℤ|nat|ℕ|bool|pos)\\b'
  }
  {
    'name'  : 'constant.language.monad.fstar'
    'match' : '\\b(Pure|PURE|Tot|STATE|ST|St|STL|Stl|ALL|All|EXN|Exn|Ex|\
                     DIV|Div|GHOST|Ghost|GTot|Lemma|TAC|Tactic|Tac)\\b'
  }
  {
    'name'  : 'keyword.operator.arrow.fstar'
    'match' : '(->|~>|→)'
  }
  {
    'name'  : 'keyword.other.logic.fstar'
    'match' : '(\\b(?:forall|exists)\\b)|(∀|∃)'
  }
  { # defines ==>, <==>, /\, and \/
    'name'  : 'keyword.operator.logic.fstar'
    'match' : '(==>|⇒|<==>|⇔|\\\\/|∨|\\/\\\\|∧)'
  }
  {
    'name'  : 'keyword.operator.cast.fstar'
    'match' : '(<:)'
  }
  {
    'name'  : 'keyword.operator.user.fstar'
    'match' : '([≥≤≠¬⇒←‖≪⟶⟵×▹◃\\&\\@\\+\\-\\=\\/\\<\\>\\_\\.\\,\\|\\!\\^\\%\\*\\?\\:\\;\\$\\~]+)'
  }
  #{
  #  'name'  : 'keyword.operator.comparison.fstar'
  #  'match' : '(<>|<=|>=|>|<|=|==|===)'
  #}
  #{
  #  'name'  : 'keyword.operator.other.fstar'
  #  'match' : '(\\!|\\?)'
  #}
  {
    'name'  : 'keyword.operator.implicit.fstar'
    'match' : '(\\#)'
  }
  {
    'name'  : 'keyword.operator.arithmetic.fstar'
    'match' : '(×|\\+|\\-|\\*|\\/)'
  }
  {
    'name'  : 'keyword.operator.append.fstar'
    'match' : '(@)'
  }
  {
    'name'  : 'keyword.operator.assign.fstar'
    'match' : '(:=|≔|<--)'
  }
  {
    'name'  : 'keyword.operator.concatenate.fstar'
    'match' : '(::|⸬)'
  }
  {
    'name'  : 'keyword.type-declaration.fstar'
    'match' : '(:)'
  }
]

'repository':
  'comments':
    'patterns': [
      {
        'name': 'comment.block.fstar'
        'begin': '\\(\\*+'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.fstar'
        'end': '\\*+\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.fstar'
        'patterns': [
          {
            'include': '#comments'
          }
        ]
      }
      {
        'name': 'comment.line.fstar'
        'match': '//.*'
      }
    ]
